name: Docker Image CI
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint
      - name: Lint YAML files
        run: yamllint .
 
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi httpx pytest
          pip install -r requirements.txt
      - name: Set timestamp
        id: set-timestamp
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag task:${{ env.TIMESTAMP }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Tag and push Docker image
        run: |
          docker tag task:${{ env.TIMESTAMP }} ${{ secrets.DOCKER_USERNAME }}/task:${{ env.TIMESTAMP }}
          docker push ${{ secrets.DOCKER_USERNAME }}/task:${{ env.TIMESTAMP }}
      - name: Save Docker image tag
        run: echo "IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/task:${{ env.TIMESTAMP }}" > image_tag.txt
      - name: Upload image tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-tag
          path: image_tag.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi httpx pytest
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          echo "testing application after test case written"

  helm-package:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download image tag artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tag
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.9.2
      - name: Load Docker image tag
        id: load-image-tag
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          TIMESTAMP=${IMAGE_TAG##*:}
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
      - name: Update Helm values
        run: |
          TIMESTAMP=${{ env.TIMESTAMP }}
          sed -i "s|^\( *image: irfan611/task:\)\(.*\)|\1${TIMESTAMP}|g" ./kubernetes/helm/values.yaml
          cat ./kubernetes/helm/values.yaml  # Print file to debug
      - name: Verify Version Format
        run: |
          TIMESTAMP=${{ env.TIMESTAMP }}
          echo "Using version: 1.0.${TIMESTAMP}"
      - name: Package Helm chart
        run: |
          TIMESTAMP=${{ env.TIMESTAMP }}
          helm package ./kubernetes/helm --version 1.0.${TIMESTAMP} --destination ./kubernetes/helm/
      - name: List files
        run: ls -lh ./kubernetes/helm/
      - name: Upload Helm chart artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: helm-chart-1.0.${{ env.TIMESTAMP }}
          path: ./kubernetes/helm/*.tgz
          overwrite: true
